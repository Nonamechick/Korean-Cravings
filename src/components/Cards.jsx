import React from 'react';
import { useState, useEffect } from 'react';
import axios from 'axios';


const Cards = () => {
  const [products, setProducts] = useState([]);
  const SHEET_ID = '18xcXDm0hLSW6_h4Ksa4DbYxdVtF47IrF_gsOBSj3ngc'; // e.g., from URL: https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID/edit https://docs.google.com/spreadsheets/d/18xcXDm0hLSW6_h4Ksa4DbYxdVtF47IrF_gsOBSj3ngc/edit?usp=sharing
  const API_KEY = 'AIzaSyC9VZIZ2hpS13gNOaIZTvhcgP5CQSGn4NY';
  const RANGE = 'Sheet1!A2:E'; // Adjust range based on your sheet


  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`
        );
        const rows = response.data.values;
        if (!rows || rows.length === 0) {
          setProducts([]);
          return;
        }
        const productData = rows.map(row => ({
          category: row[0],    // Column A
          name: row[1],        // Column B
          description: row[2], // Column C
          imageUrl: row[3],    // Column D
          price: row[4],       // Column E
        }));
        setProducts(productData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    fetchData();
  }, []);

  // Define main categories and their sub-categories
  const categoryMapping = {
    Dry_Dishes: ['–ö–ò–ú–ü–ê–ë / ÍπÄÎ∞• üç£', '–ì–û–†–Ø–ß–ò–ï –ë–õ–Æ–î–ê üçΩÔ∏è', '', '–§–†–ê–ô –ß–ò–ö–ö–ò–ù / ÏπòÌÇ® üçó', '–ß–ò–ö–ö–ò–ù–ö–ê–°, –ë–ò–§–ö–ê–° / ÏπòÌÇ®ÍπåÏä§, ÎπÑÌîÑÍπåÏä§ üçó', '–•–æ—Ç–¥–æ–≥ / Ìï´ÎèÑÍ∑∏', '–°–≠–ù–î–í–ò–ß–ò / ÏÉåÎìúÏúÑÏπò ü•™', '–ì–ê–ú–ë–£–†–ì–ï–†–´ / ÌñÑÎ≤ÑÍ±∞'],
    Soups: ['–†–ê–ú–Å–ù ÎùºÎ©¥ üçú', '–í–û–ö –∏ –ü–ê–°–¢–´ üçôüç£üç±ü•¢', '–ö–£–ö–°–£ / Íµ≠Ïàò üçú', '–ö–æ—Ä–µ–π—Å–∫–∏–µ —Å—É–ø—ã üç≤'],
    Drinks: ['–ß–ê–ô Ï∞® (Ìã∞Ìè¨Ìä∏ 1L) üçµ', '–ö–û–§–ï / Ïª§Ìîº ‚òï', '–ù–ê–ü–ò–¢–ö–ò –≤ –°–¢–ê–ö–ê–ù–ï 0,5–ª. / ÏùåÎ£å üçπ', '–ù–ê–ü–ò–¢–ö–ò –ë–£–¢–ò–õ–ò–†–û–í–ê–ù–ù–´–ï / ÏùåÎ£åÏàò ü•§'],
    Sauces: ['–°–û–£–°–´ üå∂Ô∏è'],
  };

  // Group products by main category and sub-category
  const groupedByMainCategory = products.reduce((acc, product) => {
    const mainCategory = Object.keys(categoryMapping).find(main =>
      categoryMapping[main].includes(product.category)
    ) || 'Other'; // Fallback for unmapped categories
    if (!acc[mainCategory]) {
      acc[mainCategory] = {};
    }
    if (!acc[mainCategory][product.category]) {
      acc[mainCategory][product.category] = [];
    }
    acc[mainCategory][product.category].push(product);
    return acc;
  }, {});

  return (
    <div>
      {Object.keys(groupedByMainCategory).map((mainCategory, index) => (
        <details key={index} className="w-full mb-4">
          <summary className="card-title p-4 cursor-pointer text-center bg-base-200 text-xl font-bold">
            {mainCategory === 'Dry_Dishes' ? 'üçî' : mainCategory === 'Soups' ? 'üçú' : mainCategory === 'Drinks' ? 'ü•§' : 'ü´ô'} {mainCategory}
          </summary>
          <div className="p-4 bg-base-200">
            {Object.keys(groupedByMainCategory[mainCategory]).map((subCategory, subIndex) => (
              <details key={subIndex} className="w-full mb-2">
                <summary className="card-title p-3 cursor-pointer text-center bg-base-300">
                  {subCategory === 'Sneakers' ? 'üî¥' : 'üü¢'} Show {subCategory}
                </summary>
                <div className="flex flex-wrap gap-6 justify-center p-4 bg-base-300">
                  {groupedByMainCategory[mainCategory][subCategory].map((product, idx) => (
                    <div key={idx} className="card bg-base-300 w-96 shadow-sm">
                      <figure>
                        <img
                          src={product.imageUrl}
                          alt={product.name}
                        />
                      </figure>
                      <div className="card-body">
                        <h2 className="card-title">{product.name}</h2>
                        <p>{product.description}</p>
                        <p className="text-lg font-semibold text-primary">{product.price}</p>
                        <div className="card-actions justify-end">
                          <button className="btn btn-primary">Buy Now</button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </details>
            ))}
          </div>
        </details>
      ))}
    </div>
  )
}

export default Cards